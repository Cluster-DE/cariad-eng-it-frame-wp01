name: "ðŸš€ dev-deployment"
run-name: 'ðŸš€ dev-deployment: "${{ github.ref_name }}"'

on:
  workflow_dispatch:
  push:
    # Trigger pipeline only when changes are made to workflows
    paths:
      - '.github/workflows/**'
env:
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_SERVICE_PRINCIPAL_SECRET }}
  ARM_CLIENT_ID: ${{ vars.AZURE_SERVICE_PRINCIPAL_ID }}
  # ARM_CLIENT_OBJECT_ID: ${{ secrets.AZURE_SERVICE_PRINCIPAL_OBJECT_ID }} Once this is available in the secrets, add as -var parameter in terraform plan and apply
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  RESOURCE_GROUP_NAME_EU: "rg-cariad-frame-dev-euw"
jobs:
  terraform-apply:
    name: terraform init
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: terraform init
        working-directory: infrastructure
        run: |
          terraform init -upgrade=true -reconfigure -input=false \
            -backend-config="resource_group_name=${{ vars.TF_STATE_RG_NAME }}" \
            -backend-config="storage_account_name=${{ vars.TF_STATE_STORAGE_NAME }}" \
            -backend-config="container_name=${{ vars.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=dev.tfstate"
        shell: bash

      - name: Fetch public IP of GitHub Actions runner
        id: fetch_ip
        run: |
          echo "Public IP: $(curl -s https://ipinfo.io/ip)"
          echo "::set-output name=agent_ip::$(curl -s https://ipinfo.io/ip)"

      - name: Install Azure CLI
          uses: azure/CLI@v1
        - name: Azure Login
          uses: azure/login@v1
          with:
            client-id: ${{ vars.AZURE_SERVICE_PRINCIPAL_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID }}
            subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
            client-secret: ${{ secrets.AZURE_SERVICE_PRINCIPAL_SECRET }}

        - name: Whitelist IP on all storage accounts
          run: |
            IP_ADDRESS=${{ steps.fetch_ip.outputs.agent_ip }}
            RESOURCE_GROUP=${{ vars.RESOURCE_GROUP_NAME_EU }}
            STORAGE_ACCOUNTS=$(az storage account list --resource-group $RESOURCE_GROUP --query "[].name" -o tsv)
            for ACCOUNT in $STORAGE_ACCOUNTS; do
              az storage account network-rule add --resource-group $RESOURCE_GROUP --account-name $ACCOUNT --ip-address $IP_ADDRESS
            done
          shell: bash
        
        - name: terraform plan
          working-directory: infrastructure
          shell: bash
          run: |
            export exitcode=0
            terraform plan -var-file="environment/dev/dev.tfvars" \
              -var="whitelisted_ips=[\"${{ steps.fetch_ip.outputs.agent_ip }}\"]" \
              -input=false -detailed-exitcode -no-color -out tfplan || export exitcode=$?
            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

            if [ $exitcode -eq 1 ]; then
              echo Terraform Plan Failed!
              exit 1
            else
              exit 0
            fi

        - name: terraform plan string
          working-directory: infrastructure
          shell: bash
          id: tf-plan-string
          run: |
            TERRAFORM_PLAN=$(terraform show -no-color tfplan)
            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Check Terraform Plan" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT

        - name: terraform apply
          working-directory: infrastructure
          run: |
            terraform apply -input=false -auto-approve tfplan
          shell: bash